# software/streamlit_dashboard/app.py
import streamlit as st
import pandas as pd, os, joblib
import matplotlib.pyplot as plt
from translate import Translator

# Translator for offline translation
translator = Translator(to_lang="en")

# List of official languages as per Eighth Schedule
translations_meta = {
    "en": "English (English)",
    "hi": "рд╣рд┐рдиреНрджреА (Hindi)",
    "ta": "родрооро┐ро┤рпН (Tamil)",
    "as": "ржЕрж╕ржорзАржпрж╝рж╛ (Assamese)",
    "bn": "ржмрж╛ржВрж▓рж╛ (Bengali)",
    "brx": "рдмрдбрд╝реЛ (Bodo)",
    "doi": "рдбреЛрдЧрд░реА (Dogri)",
    "gu": "ркЧрлБркЬрк░рк╛ркдрлА (Gujarati)",
    "kn": "р▓Хр▓ир│Нр▓ир▓б (Kannada)",
    "ks": "┘Г╪┤┘Е┘К╪▒┘К (Kashmiri)",
    "kok": "рдХреЛрдВрдХрдгреА (Konkani)",
    "mai": "рдореИрдерд┐рд▓реА (Maithili)",
    "ml": "р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)",
    "mni": "ржорзЗржЗрждрзЗржЗ (Manipuri)",
    "mr": "рдорд░рд╛рдареА (Marathi)",
    "ne": "рдиреЗрдкрд╛рд▓реА (Nepali)",
    "or": "рмУрмбрм╝рм┐рмЖ (Odia)",
    "pa": "рикрй░риЬри╛римрйА (Punjabi)",
    "sa": "рд╕рдВрд╕реНрдХреГрддрдореН (Sanskrit)",
    "sat": "с▒ес▒Яс▒▒с▒Ыс▒Яс▒▓с▒д (Santali)",
    "sd": "╪│┘Ж┌М┘К (Sindhi)",
    "te": "р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)",
    "ur": "╪з┘П╪▒╪п┘П┘И (Urdu)"
}

# Manual translations for some languages
translations = {
    "en": {
        "title": "SmartFab Demo Dashboard",
        "recent_readings": "Recent Readings & Predictions",
        "quick_stats": "Quick Stats",
        "mean_current": "Mean Current (A)",
        "mean_temp": "Mean Temp (┬░C)",
        "mean_vib": "Mean Vibration",
        "model_loaded": "Model loaded",
        "anomaly_counts": "Anomaly Counts by Machine",
        "power_vs_solar": "Power vs Solar (last 200)",
        "no_data": "No data available",
        "no_model": "Model not found. Train model first.",
        "note": "Note: Demo uses synthetic data to validate pipeline. Live deployment collects local data on edge devices."
    },
    "hi": {
        "title": "рд╕реНрдорд╛рд░реНрдЯрдлреИрдм рдбреЗрдореЛ рдбреИрд╢рдмреЛрд░реНрдб",
        "recent_readings": "рд╣рд╛рд▓ рдХреА рд░реАрдбрд┐рдВрдЧ рдФрд░ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        "quick_stats": "рддреНрд╡рд░рд┐рдд рдЖрдБрдХрдбрд╝реЗ",
        "mean_current": "рдФрд╕рдд рдХрд░рдВрдЯ (A)",
        "mean_temp": "рдФрд╕рдд рддрд╛рдкрдорд╛рди (┬░C)",
        "mean_vib": "рдФрд╕рдд рдХрдВрдкрди",
        "model_loaded": "рдореЙрдбрд▓ рд▓реЛрдб рд╣реБрдЖ",
        "anomaly_counts": "рдорд╢реАрди рджреНрд╡рд╛рд░рд╛ рд╡рд┐рд╕рдВрдЧрддрд┐ рдЧрдгрдирд╛",
        "power_vs_solar": "рдкрд╛рд╡рд░ рдмрдирд╛рдо рд╕реЛрд▓рд░ (рдЕрдВрддрд┐рдо 200)",
        "no_data": "рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ",
        "no_model": "рдореЙрдбрд▓ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдкрд╣рд▓реЗ рдореЙрдбрд▓ рдЯреНрд░реЗрди рдХрд░реЗрдВред",
        "note": "рдиреЛрдЯ: рдбреЗрдореЛ рдкрд╛рдЗрдкрд▓рд╛рдЗрди рдХреЛ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рд┐рдВрдереЗрдЯрд┐рдХ рдбреЗрдЯрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддрд╛ рд╣реИред рд▓рд╛рдЗрд╡ рдбрд┐рдкреНрд▓реЙрдпрдореЗрдВрдЯ рдПрдЬ рдбрд┐рд╡рд╛рдЗрд╕ рдкрд░ рд╕реНрдерд╛рдиреАрдп рдбреЗрдЯрд╛ рдПрдХрддреНрд░ рдХрд░рддрд╛ рд╣реИред"
    },
    "ta": {
        "title": "ро╕рпНрооро╛ро░рпНроЯрпНроГрокро╛рокрпН роЯрпЖроорпЛ роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ",
        "recent_readings": "роЪроорпАрокродрпНродро┐роп рокродро┐ро╡рпБроХро│рпН & роХрогро┐рокрпНрокрпБроХро│рпН",
        "quick_stats": "ро╡ро┐ро░рпИро╡ро╛рой рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роЩрпНроХро│рпН",
        "mean_current": "роЪро░ро╛роЪро░ро┐ рооро┐ройрпНроЪро╛ро░роорпН (A)",
        "mean_temp": "роЪро░ро╛роЪро░ро┐ ро╡рпЖрокрпНрокроиро┐ро▓рпИ (┬░C)",
        "mean_vib": "роЪро░ро╛роЪро░ро┐ роЕродро┐ро░рпНро╡рпБ",
        "model_loaded": "рооро╛родро┐ро░ро┐ роПро▒рпНро▒рокрпНрокроЯрпНроЯродрпБ",
        "anomaly_counts": "роЗропроирпНродро┐ро░ ро╡ро╛ро░ро┐ропро╛роХ роХрпЛро│ро╛ро▒рпБроХро│рпН",
        "power_vs_solar": "рокро╡ро░рпН Vs роЪрпЛро▓ро╛ро░рпН (роХроЯрпИроЪро┐ 200)",
        "no_data": "родро░ро╡рпБ роЗро▓рпНро▓рпИ",
        "no_model": "рооро╛родро┐ро░ро┐ роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роорпБродро▓ро┐ро▓рпН рооро╛родро┐ро░ро┐ рокропро┐ро▒рпНроЪро┐ роЪрпЖропрпНропро╡рпБроорпН.",
        "note": "роХрпБро▒ро┐рокрпНрокрпБ: роЯрпЖроорпЛ роЪрпЖропро▒рпНроХрпИ родро░ро╡рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ. роирпЗро░роЯро┐ рокропройрпНрокро╛роЯрпБ роОроЯрпНроЬрпН роЪро╛родройроЩрпНроХро│ро┐ро▓рпН роЙро│рпНро│рпВро░рпН родро░ро╡рпИ роЪрпЗроХро░ро┐роХрпНроХрпБроорпН."
    }
}

# Fill missing translations automatically
for lang_code in translations_meta:
    if lang_code not in translations:
        translations[lang_code] = {}
        for key, text in translations["en"].items():
            try:
                translated_text = translator.translate(text, dest=lang_code)
            except:
                translated_text = f"[Translation for {lang_code}]"
            translations[lang_code][key] = translated_text

# Language selector
lang = st.sidebar.selectbox("ЁЯМР Language", list(translations_meta.keys()), format_func=lambda x: translations_meta[x])
T = translations[lang]

# Data paths
BASE = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
DATA_PATH = os.path.join(BASE, 'data', 'synthetic_sensor_data.csv')
MODEL_PATH = os.path.join(BASE, 'firmware', 'edge_ai_code', 'model.joblib')

st.set_page_config(page_title=T["title"], layout='wide')
st.title(T["title"])

# Layout
col1, col2 = st.columns([2,1])
with col1:
    st.header(T["recent_readings"])
    if os.path.exists(DATA_PATH):
        df = pd.read_csv(DATA_PATH, parse_dates=['timestamp'])
        df = df.sort_values('timestamp').tail(200)
        st.dataframe(df.tail(20))
    else:
        st.info(T["no_data"])

with col2:
    st.header(T["quick_stats"])
    if os.path.exists(DATA_PATH):
        df_all = pd.read_csv(DATA_PATH, parse_dates=['timestamp'])
        st.metric(T["mean_current"], round(df_all['current_a'].mean(),3))
        st.metric(T["mean_temp"], round(df_all['temperature_c'].mean(),3))
        st.metric(T["mean_vib"], int(df_all['vibration_raw'].mean()))
    else:
        st.write(T["no_data"])

# Model predictions
if os.path.exists(MODEL_PATH) and os.path.exists(DATA_PATH):
    model = joblib.load(MODEL_PATH)
    st.success(T["model_loaded"])
    features = ['current_a','temperature_c','vibration_raw','power_kw','solar_kw','current_ma_3','temp_ma_3','vib_ma_3']
    df = pd.read_csv(DATA_PATH, parse_dates=['timestamp']).sort_values('timestamp')
    df['current_ma_3'] = df.groupby('machine_id')['current_a'].transform(lambda x: x.rolling(3, min_periods=1).mean())
    df['temp_ma_3'] = df.groupby('machine_id')['temperature_c'].transform(lambda x: x.rolling(3, min_periods=1).mean())
    df['vib_ma_3'] = df.groupby('machine_id')['vibration_raw'].transform(lambda x: x.rolling(3, min_periods=1).mean())
    X = df[features].astype(float)
    preds = model.predict(X)
    scores = model.predict_proba(X)[:,1] if hasattr(model, 'predict_proba') else [None]*len(preds)
    df['anomaly_pred'] = preds
    df['anomaly_score'] = scores
    st.subheader(T["anomaly_counts"])
    st.bar_chart(df.groupby('machine_id')['anomaly_pred'].sum())
    st.subheader(T["power_vs_solar"])
    plt.figure(figsize=(8,3))
    plt.plot(df['timestamp'].tail(200), df['power_kw'].tail(200), label='power_kw')
    plt.plot(df['timestamp'].tail(200), df['solar_kw'].tail(200), label='solar_kw')
    plt.legend()
    st.pyplot(plt)
else:
    st.warning(T["no_model"])

st.markdown('---')
st.markdown(f"**{T['note']}**")
